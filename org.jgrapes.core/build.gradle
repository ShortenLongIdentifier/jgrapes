test {
//	// set a system property for the test JVM(s)
//	systemProperty 'java.util.logging.config.file', 'jul-debug.properties'
//  
//	// show standard out and standard error of the test JVM(s) on the console
//	testLogging.showStandardStreams = true
  
}

task javadocJar(type: Jar) {
	from (javadoc)
	classifier "javadoc"
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

configurations {
    javadocTaglets
}

configurations {
    markdownDoclet
    javadocTaglets
}

dependencies {
    markdownDoclet "org.jdrupes.mdoclet:doclet:3.0.0"
    javadocTaglets "org.jdrupes.taglets:plantuml-taglet:2.0.1"
}

var docDestinationDir = file("${rootProject.buildDir}/javadoc")

task javadocResources(type: Copy) {
    into file(docDestinationDir)
    from ("${rootProject.rootDir}/misc") {
        include '*.woff2'
    }
}

task java11doc(type: JavaExec) {
    // Does not work on JitPack, no /usr/bin/dot
    enabled = JavaVersion.current() == JavaVersion.VERSION_17 && !isJitPackBuild

    dependsOn javadocResources

    // Make sure that other projects' compileClasspaths are resolved
    rootProject.subprojects
        .findAll({project -> project.name.startsWith("org.jgrapes") &&
            project.name != "org.jgrapes.core"})
        .each{project -> dependsOn project.tasks.assemble}
    
    inputs.file rootProject.file('overview.md')
    inputs.file "${rootProject.rootDir}/misc/stylesheet.css"
    
    classpath = files(rootProject.subprojects
        .findAll({project -> project.name.startsWith("org.jgrapes")})
        .collect {project -> project.sourceSets.main.compileClasspath})
    var sourceDirs = rootProject.subprojects
        .findAll({project -> project.name.startsWith("org.jgrapes")})
        .collect{project -> project.sourceSets.main.allJava.getSrcDirs() }
        .flatten().findAll(dir -> dir.exists())
    sourceDirs.each { inputs.dir(it) }
    
    outputs.dir(docDestinationDir)
    
    jvmArgs = ['--add-exports=jdk.javadoc/jdk.javadoc.internal.tool=ALL-UNNAMED',
               '--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED']
    main = 'jdk.javadoc.internal.tool.Main'
    args = ['-doctitle', "JGrapes ${project.version}",
        '-use',
        '-linksource',
        '-link', 'https://docs.oracle.com/en/java/javase/11/docs/api/',
        '-link', 'https://mnlipp.github.io/jdrupes-httpcodec/javadoc/',
        '--add-exports', 'jdk.javadoc/jdk.javadoc.internal.tool=ALL-UNNAMED',
        '--add-exports', 'jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
        '-doclet', 'org.jdrupes.mdoclet.MDoclet',
        '-docletpath', configurations.markdownDoclet.files.asType(List).join(":"),
        '--disable-auto-highlight',
        '-tagletpath', configurations.javadocTaglets.files.asType(List).join(":"),
        '-taglet', 'org.jdrupes.taglets.plantUml.PlantUml',
        '-taglet', 'org.jdrupes.taglets.plantUml.StartUml',
        '-taglet', 'org.jdrupes.taglets.plantUml.EndUml',
        '-overview', "${rootProject.file('overview.md')}",
        '-d', docDestinationDir,
        '-sourcepath', sourceDirs.join(':'),
        '-subpackages', 'org.jgrapes',
        '-bottom', rootProject.file("misc/javadoc.bottom.txt").text,
        '--allow-script-in-comments',
        '-Xdoclint:-html',
        '--main-stylesheet', "${rootProject.rootDir}/misc/stylesheet.css",
        '--add-exports=jdk.javadoc/jdk.javadoc.internal.doclets.formats.html=ALL-UNNAMED'
        ]
    
    ignoreExitValue true
}

	