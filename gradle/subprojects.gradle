import java.util.regex.Pattern
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

apply plugin: 'signing'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'org.jdrupes.mdoclet'
    
if (project.file("bnd.bnd").exists()) {

    apply plugin: 'biz.aQute.bnd.builder'
        
    // Provide the Bundle-Version (shared by all libraries)
    ext.bundleVersion = "${-> releaseVersion + (isSnapshot ? '.-\${tstamp}-SNAPSHOT' : '.ga')}"
        
    jar {
        manifest {
            attributes('Bundle-Version': bundleVersion)
        }
    }

    if (project.name != "examples") {
        apply from: "${project.rootDir}/gradle/baseline.gradle"
    }

}
    
dependencies {
    compileOnly 'org.osgi:org.osgi.annotation:6.0.0'
    testCompile 'junit:junit:4.12', 'net.jodah:concurrentunit:0.4.2'
    testCompile "org.codehaus.groovy:groovy-all:2.4.15"
    testCompile "org.spockframework:spock-core:1.2-groovy-2.4"
}

apply from: "${project.rootDir}/gradle/layout.gradle"

test {
//    if (!rootProject.isTravisBuild) {
//        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=18888'
//    }
        
    testLogging {
        events TestLogEvent.FAILED,
               TestLogEvent.SKIPPED,
               TestLogEvent.PASSED,
               TestLogEvent.STANDARD_ERROR,
               TestLogEvent.STANDARD_OUT
               
        exceptionFormat TestExceptionFormat.FULL

        showStandardStreams = true
        showExceptions = true
        showStackTraces = true
        showCauses = true
    }
        
    if (isTravisBuild) {
        maxParallelForks = 2
        maxHeapSize = '768m'
    } else {
        maxHeapSize = '2048m'
    }
    
    // https://bugs.openjdk.java.net/browse/JDK-8213202
    if (JavaVersion.current().isJava11()) {
        jvmArgs '-Dhttps.protocols=TLSv1,TLSv1.1,TLSv1.2'
    }
}

if (project.name.startsWith("org.jgrapes.")) {
    apply from: "${project.rootDir}/gradle/publishing.gradle"
    
    tasks.compileJava {
        if (!JavaVersion.current().isJava8()) {
            options.compilerArgs.addAll(['--release', '8'])
        }
    }
}

task releaseTag {
    doLast {
        String name = project.name.startsWith(project.group + ".") ?
            project.name.substring(project.group.length() + 1) : project.name
        name = name.replace('.', '-')
        String tag = name + "-" + project.version
        grgit.tag.add(name: tag, message: "Released.")
        grgit.push(refsOrSpecs: [tag])
    }
}

build.mustRunAfter "releaseTag"

task releaseToBintray {
    group = "publishing"
    
    dependsOn "releaseTag"
    dependsOn "clean"
    dependsOn "build"
    dependsOn "bintrayUpload"
}


apply from: "${project.rootDir}/gradle/eclipse.gradle"
